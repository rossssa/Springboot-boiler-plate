name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    # 1) git ignore에 등록된 application.yml 파일 생성해주기
    - name: make application.yml
      run: |
         cd ./src/main/resources
         touch ./application.yml
         echo "${{ secrets.PROPERTIES }}" > ./application.yml
      shell: bash
      
    # 2) 스프링 프로젝트 jar 파일 빌드
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew clean build --no-daemon
      
    # 3) Docker Hub에 이미지 push 하기
    - name: Docker build
      run: |
        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/first . 
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/first


   # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정 
  run-docker-image-on-ec2:
    # build-docker-image (위)과정이 완료되어야 실행됩니다.
    needs: build-docker-image
    runs-on: self-hosted

    steps:

      # 0. 도커에 로그인합니다
      - name: docker login
        run: sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
     
      # 1. 최신 이미지를 풀받습니다
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/first
      
      # 2. 기존의 컨테이너를 중지시킵니다
      - name: docker stop container
        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: docker-compose run new container
        run: sudo docker-compose up -d
        
      # 4. 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: sudo docker system prune -f
